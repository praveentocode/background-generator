To add project initially:
	git remote add origin "ssh/https url"

To Clone[To download project initially]:
	git clone "http clone url"
	
To remove origin:
	git remote remove origin
	
To Know Status:
	git status
	
To Add file:
	git add filename

To Add all files:
	git add .
	
To Commit:
	git commit -m "message"
	
To Publish/Push local commits to repository/master:
	git push
	git push origin master
	
To Sync from repository:
	git pull
	
BRANCHING:
	Branching is to make sure a developer can work on his/her individual branch without merging it to the master/production release.
	
	To see the branch:
		git branch
		
	To add branch:
		git branch branch-name
		
	To change branch:
		git checkout branch-name
		
	To push the branch when branch is not there:
		git push --set-upstream origin branch-name
	
	To push the branch when branch exists:
		git push

TO CREATE PULL REQUEST FOR REVIEW:
	1. Click on "Compare & Pull request"
	2. Add the comments regarding changes and click on "Create Pull request"
	3. Pull request will now be created.
	
TO VIEW THE PULL REQUEST:
	1. Click on "Pull requests" to view it.
	2. See the "File Changes".
	3. Click on the lines in the code to add any comment and click on "Start a review"
	4. To finish review, click on "Finish your review" by adding final comments. 

TO MERGE PULL REQUEST: (Mostly will be done by somebody on Team)
	1. Click on "Merge Pull Request" and "Confirm Merge"
	2. Delete the branch if not required.
	3. All done. now changes will be reflected in the master code. 
	
TO MERGE BRANCH WITH MASTER:
	git merge master
	
	SCENARIO WHERE MERGE CONFLICT CAN OCCUR:
		When 2 developers work on the same changes.
		
		1. Developer A already created a Pull request for his branch and waiting for review and merge request by Developer B.
		2. Developer B has made a change on the same line as of Developer A. Now, Developer B accepts the Pull request of Developer A without
		realizing the same line change and merges into the master. 
		3. Now Developer B makes changes on the same line in his branch and commits to the branch. Developer B to make sure he has latest
		code in the master, he changes the branch to the master and makes "git pull" command. Now he changes his branch back to his 
		latest changes branch and merges the master with his branch. Now the conflict occurs.		
		4. If there are conflicts, in the file, <<<<<HEAD and >>>>>master will be displayed. If we want to have those merge changes, 
		we can delete HEAD/master and commit those changes.
		
TO DEPLOY PROJECT:
	1. Click on Repository -> New -> Enter Respository Name and Create Repository
	2. Copy the SSH key. If there is not SSH key, click on HTTPS instead.
	3. Connect the actual project to the repository we made. 
		a. In git (master) => git remote add origin git@github.com:praveentocode/monster-rolodex.git
		b. yarn add gh-pages
		c. In react app, go to package.json and add "homepage": "https://github-username.github.io/name-of-the-repository".
		d. Add 2 scripts. 
			"scripts: {
				"predeploy" : "yarn build"
				"deploy" : "gh-pages -d build"
			}
	4. Go to terminal and command "yarn deploy". If there is permission denied error, then use Https instead of ssh.
	5. git add -A
	6. git commit -m "adding files for github pages"
	7. ggpush
		If you don't have zsh shell, you will have to run: 
			git push origin master
	8. Go to github repository and refresh. We can see the project files.
	9. Go to Settings, make sure source is pointing to the "gh-pages-branch".
		Click on the link, we can see the website is live. 
	






